import { __decorate, __param } from "tslib";
import { ComponentFactoryResolver, ComponentRef, Directive, ElementRef, Inject, Input, OnDestroy, OnInit, Optional, Self, TemplateRef, ViewContainerRef, EmbeddedViewRef } from '@angular/core';
import { AbstractControl, ControlContainer, NgControl, ValidationErrors } from '@angular/forms';
import { DefaultControlErrorComponent } from './control-error.component';
import { ControlErrorAnchorDirective } from './control-error-anchor.directive';
import { EMPTY, fromEvent, merge, NEVER, Subject } from 'rxjs';
import { ErrorTailorConfigProvider, FORM_ERRORS } from './providers';
import { distinctUntilChanged, mapTo, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { FormActionDirective } from './form-action.directive';
let ControlErrorsDirective = class ControlErrorsDirective {
    constructor(vcr, resolver, host, config, globalErrors, controlErrorAnchorParent, form, ngControl, controlContainer) {
        this.vcr = vcr;
        this.resolver = resolver;
        this.host = host;
        this.config = config;
        this.globalErrors = globalErrors;
        this.controlErrorAnchorParent = controlErrorAnchorParent;
        this.form = form;
        this.ngControl = ngControl;
        this.controlContainer = controlContainer;
        this.customErrors = {};
        this.controlErrorsOnAsync = true;
        this.controlErrorsOnBlur = true;
        this.destroy = new Subject();
        this.showError$ = new Subject();
        this.mergedConfig = {};
        this.submit$ = this.form ? this.form.submit$ : EMPTY;
        this.reset$ = this.form ? this.form.reset$ : EMPTY;
        this.mergedConfig = this.buildConfig();
    }
    ngOnInit() {
        this.anchor = this.resolveAnchor();
        this.control = (this.controlContainer || this.ngControl).control;
        const hasAsyncValidator = !!this.control.asyncValidator;
        const statusChanges$ = this.control.statusChanges.pipe(distinctUntilChanged());
        const valueChanges$ = this.control.valueChanges;
        const controlChanges$ = merge(statusChanges$, valueChanges$);
        let changesOnAsync$ = EMPTY;
        let changesOnBlur$ = EMPTY;
        if (this.controlErrorsOnAsync && hasAsyncValidator) {
            // hasAsyncThenUponStatusChange
            changesOnAsync$ = statusChanges$.pipe(startWith(true));
        }
        if (this.controlErrorsOnBlur && this.isInput) {
            const blur$ = fromEvent(this.host.nativeElement, 'focusout');
            // blurFirstThenUponChange
            changesOnBlur$ = blur$.pipe(switchMap(() => valueChanges$.pipe(startWith(true))));
        }
        const submit$ = merge(this.submit$.pipe(mapTo(true)), this.reset$.pipe(mapTo(false)));
        // when submitted, submitFirstThenUponChanges
        const changesOnSubmit$ = submit$.pipe(switchMap(submit => (submit ? controlChanges$.pipe(startWith(true)) : NEVER)));
        // on reset, clear ComponentRef and customAnchorDestroyFn
        this.reset$.pipe(takeUntil(this.destroy)).subscribe(() => this.clearRefs());
        merge(changesOnAsync$, changesOnBlur$, changesOnSubmit$, this.showError$)
            .pipe(takeUntil(this.destroy))
            .subscribe(() => this.valueChanges());
    }
    setError(text, error) {
        if (!this.ref) {
            const factory = this.resolver.resolveComponentFactory(this.mergedConfig.controlErrorComponent);
            this.ref = this.anchor.createComponent(factory);
        }
        const instance = this.ref.instance;
        if (this.controlErrorsTpl) {
            instance.createTemplate(this.controlErrorsTpl, error, text);
        }
        else {
            instance.text = text;
        }
        if (this.controlErrorsClass) {
            instance.customClass = this.controlErrorsClass;
        }
        if (!this.controlErrorAnchor && this.mergedConfig.controlErrorComponentAnchorFn) {
            this.customAnchorDestroyFn = this.mergedConfig.controlErrorComponentAnchorFn(this.host.nativeElement, this.ref.hostView.rootNodes[0]);
        }
    }
    /**
     * Explicit showing of a control error via some custom application code.
     */
    showError() {
        this.showError$.next();
    }
    /**
     * Explicit hiding of a control error via some custom application code.
     */
    hideError() {
        this.setError(null);
    }
    ngOnDestroy() {
        this.destroy.next();
        this.clearRefs();
    }
    get isInput() {
        return this.mergedConfig.blurPredicate(this.host.nativeElement);
    }
    clearRefs() {
        if (this.customAnchorDestroyFn) {
            this.customAnchorDestroyFn();
            this.customAnchorDestroyFn = null;
        }
        if (this.ref) {
            this.ref.destroy();
        }
        this.ref = null;
    }
    valueChanges() {
        const controlErrors = this.control.errors;
        if (controlErrors) {
            const [firstKey] = Object.keys(controlErrors);
            const getError = this.customErrors[firstKey] || this.globalErrors[firstKey];
            if (!getError) {
                return;
            }
            const text = typeof getError === 'function' ? getError(controlErrors[firstKey]) : getError;
            if (this.isInput) {
                this.host.nativeElement.parentElement.classList.add('error-tailor-has-error');
            }
            this.setError(text, controlErrors);
        }
        else if (this.ref) {
            if (this.isInput) {
                this.host.nativeElement.parentElement.classList.remove('error-tailor-has-error');
            }
            this.setError(null);
        }
    }
    resolveAnchor() {
        if (this.controlErrorAnchor) {
            return this.controlErrorAnchor.vcr;
        }
        if (this.controlErrorAnchorParent) {
            return this.controlErrorAnchorParent.vcr;
        }
        return this.vcr;
    }
    buildConfig() {
        return Object.assign({
            blurPredicate(element) {
                return element.tagName === 'INPUT' || element.tagName === 'SELECT';
            },
            controlErrorComponent: DefaultControlErrorComponent
        }, this.config);
    }
};
ControlErrorsDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [ErrorTailorConfigProvider,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_ERRORS,] }] },
    { type: ControlErrorAnchorDirective, decorators: [{ type: Optional }] },
    { type: FormActionDirective, decorators: [{ type: Optional }] },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] }
];
__decorate([
    Input('controlErrors')
], ControlErrorsDirective.prototype, "customErrors", void 0);
__decorate([
    Input()
], ControlErrorsDirective.prototype, "controlErrorsClass", void 0);
__decorate([
    Input()
], ControlErrorsDirective.prototype, "controlErrorsTpl", void 0);
__decorate([
    Input()
], ControlErrorsDirective.prototype, "controlErrorsOnAsync", void 0);
__decorate([
    Input()
], ControlErrorsDirective.prototype, "controlErrorsOnBlur", void 0);
__decorate([
    Input()
], ControlErrorsDirective.prototype, "controlErrorAnchor", void 0);
ControlErrorsDirective = __decorate([
    Directive({
        selector: '[formControlName]:not([controlErrorsIgnore]), [formControl]:not([controlErrorsIgnore]), [formGroup]:not([controlErrorsIgnore]), [formGroupName]:not([controlErrorsIgnore]), [formArrayName]:not([controlErrorsIgnore]), [ngModel]:not([controlErrorsIgnore])',
        exportAs: 'errorTailor'
    }),
    __param(3, Inject(ErrorTailorConfigProvider)),
    __param(4, Inject(FORM_ERRORS)),
    __param(5, Optional()),
    __param(6, Optional()),
    __param(7, Optional()), __param(7, Self()),
    __param(8, Optional()), __param(8, Self())
], ControlErrorsDirective);
export { ControlErrorsDirective };
//# sourceMappingURL=data:application/json;base64,